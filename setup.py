#!/usr/bin/env python3
"""
AI Cover Letter Generator - Setup Script
Helps users configure the environment and get started.
"""

import os
import sys
import shutil
import secrets
from pathlib import Path

def print_banner():
    print("=" * 60)
    print("🤖 AI Cover Letter Generator - Setup")
    print("=" * 60)

def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 8):
        print("❌ Python 3.8 or higher is required")
        sys.exit(1)
    print(f"✅ Python {sys.version_info.major}.{sys.version_info.minor} detected")

def create_env_file():
    """Create .env file from template"""
    template_path = Path("env.template")
    env_path = Path(".env")
    
    if env_path.exists():
        response = input("📄 .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("⏭️  Skipping .env creation")
            return
    
    if not template_path.exists():
        print("❌ env.template not found. Creating basic .env file...")
        create_basic_env()
        return
    
    try:
        shutil.copy(template_path, env_path)
        print("✅ Created .env file from template")
        print("📝 Please edit .env file with your configuration")
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")
        create_basic_env()

def create_basic_env():
    """Create a basic .env file"""
    secret_key = secrets.token_urlsafe(32)
    env_content = f"""# AI Cover Letter Generator - Basic Configuration
# Generated by setup script

# LLM Configuration (Ollama - local)
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_MODEL=llama3.2:latest

# Security
SECRET_KEY={secret_key}

# Development
DEBUG=True

# Database
DATABASE_URL=sqlite:///./ai_cover_letter.db

# Optional: Add API keys for company research
# TAVILY_API_KEY=your_tavily_api_key_here
# GOOGLE_API_KEY=your_google_api_key_here
# BRAVE_API_KEY=your_brave_api_key_here
"""
    
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        print("✅ Created basic .env file")
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")

def check_ollama():
    """Check if Ollama is available"""
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            print("✅ Ollama is running")
            return True
        else:
            print("⚠️  Ollama is running but may not be responding correctly")
            return False
    except Exception:
        print("❌ Ollama is not running")
        print("💡 To install Ollama:")
        print("   - Visit: https://ollama.ai/")
        print("   - Or run: curl -fsSL https://ollama.ai/install.sh | sh")
        print("   - Then run: ollama pull llama3.2:latest")
        return False

def check_dependencies():
    """Check if required dependencies are installed"""
    required_packages = [
        "fastapi", "uvicorn", "sqlalchemy", "pydantic",
        "python-multipart", "python-dotenv", "requests"
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"❌ Missing packages: {', '.join(missing_packages)}")
        print("💡 Install with: pip install -r requirements.txt")
        return False
    else:
        print("✅ All required packages are installed")
        return True

def create_directories():
    """Create necessary directories"""
    directories = ["uploads", "logs", "exports"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    print("✅ Created necessary directories")

def run_migrations():
    """Run database migrations"""
    try:
        import subprocess
        result = subprocess.run(["alembic", "upgrade", "head"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ Database migrations completed")
        else:
            print(f"⚠️  Migration warning: {result.stderr}")
    except Exception as e:
        print(f"⚠️  Could not run migrations: {e}")
        print("💡 You can run migrations manually with: alembic upgrade head")

def print_next_steps():
    """Print next steps for the user"""
    print("\n" + "=" * 60)
    print("🎉 Setup Complete!")
    print("=" * 60)
    print("\n📋 Next Steps:")
    print("1. Edit .env file with your configuration")
    print("2. Start Ollama: ollama serve")
    print("3. Pull model: ollama pull llama3.2:latest")
    print("4. Run the application: uvicorn app.main:app --reload")
    print("5. Open browser: http://localhost:8000")
    print("\n🔧 Optional Enhancements:")
    print("- Get Tavily API key for company research: https://tavily.com/")
    print("- Get Brave Search API key: https://api.search.brave.com/")
    print("- Install self-hosted search engines (YaCy, SearXNG)")
    print("\n📚 Documentation:")
    print("- README.md for detailed usage instructions")
    print("- env.template for all configuration options")

def main():
    print_banner()
    
    print("\n🔍 Checking system requirements...")
    check_python_version()
    
    print("\n📦 Checking dependencies...")
    deps_ok = check_dependencies()
    
    print("\n🤖 Checking Ollama...")
    ollama_ok = check_ollama()
    
    print("\n📁 Creating directories...")
    create_directories()
    
    print("\n📄 Creating environment file...")
    create_env_file()
    
    print("\n🗄️  Running database migrations...")
    run_migrations()
    
    print_next_steps()
    
    if not deps_ok:
        print("\n⚠️  Some dependencies are missing. Please install them before running the application.")
    
    if not ollama_ok:
        print("\n⚠️  Ollama is not running. Please start it before running the application.")

if __name__ == "__main__":
    main() 